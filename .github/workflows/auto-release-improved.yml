name: Release

on:
  workflow_dispatch:
    inputs:
      release_type:
        description: 'Release type (for manual triggers only)'
        required: true
        default: 'patch'
        type: choice
        options:
          - patch
          - minor
          - major
  push:
    branches: [main]
    paths-ignore:
      - '**.md'
      - '.github/**'
      - '.gitignore'
      - '.npmignore'
      - '**/__tests__/**'
      - '**/*.test.ts'
      - '**/*.test.tsx'
      - '**/fixtures/**'
      - '**/mocks/**'
      - 'docs/**'
      - 'scripts/**'

permissions:
  contents: write
  packages: write

# Prevent multiple releases from running at the same time
concurrency:
  group: release
  cancel-in-progress: false

jobs:
  check-release:
    runs-on: ubuntu-latest
    outputs:
      should_release: ${{ steps.check.outputs.should_release }}
      version: ${{ steps.check.outputs.version }}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
          
      - name: Check if release needed
        id: check
        run: |
          # Get current version from package.json
          CURRENT_VERSION=$(node -p "require('./package.json').version")
          echo "Current version in package.json: $CURRENT_VERSION"
          
          # Get the latest tag
          LATEST_TAG=$(git describe --tags --abbrev=0 2>/dev/null || echo "v0.0.0")
          LATEST_VERSION=${LATEST_TAG#v}
          echo "Latest tagged version: $LATEST_VERSION"
          
          # For manual triggers, always release
          if [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
            echo "Manual trigger - will bump version and release"
            echo "should_release=true" >> $GITHUB_OUTPUT
            echo "version=$CURRENT_VERSION" >> $GITHUB_OUTPUT
            exit 0
          fi
          
          # For automatic triggers, only release if package.json version is newer than latest tag
          if [[ "$CURRENT_VERSION" != "$LATEST_VERSION" ]]; then
            # Simple version comparison (works for semver)
            if printf '%s\n' "$LATEST_VERSION" "$CURRENT_VERSION" | sort -V | tail -n1 | grep -q "^$CURRENT_VERSION$"; then
              echo "Version $CURRENT_VERSION is newer than $LATEST_VERSION - will release"
              echo "should_release=true" >> $GITHUB_OUTPUT
              echo "version=$CURRENT_VERSION" >> $GITHUB_OUTPUT
            else
              echo "Version $CURRENT_VERSION is not newer than $LATEST_VERSION - skipping"
              echo "should_release=false" >> $GITHUB_OUTPUT
            fi
          else
            echo "Version unchanged - skipping release"
            echo "should_release=false" >> $GITHUB_OUTPUT
          fi

  release:
    needs: check-release
    if: needs.check-release.outputs.should_release == 'true'
    runs-on: ubuntu-latest
    
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}
          
      - uses: oven-sh/setup-bun@v1
        with:
          bun-version: 1.1.0
          
      - uses: actions/setup-node@v4
        with:
          node-version: '20'
          registry-url: 'https://registry.npmjs.org'
          
      - name: Install dependencies
        run: bun install
        
      - name: Run tests
        run: bun run test
        
      - name: Build
        run: bun run build
        
      - name: Handle version for manual triggers
        if: github.event_name == 'workflow_dispatch'
        run: |
          # For manual triggers, bump version locally without committing
          npm version ${{ github.event.inputs.release_type }} --no-git-tag-version
          NEW_VERSION=$(node -p "require('./package.json').version")
          echo "NEW_VERSION=$NEW_VERSION" >> $GITHUB_ENV
          echo "Bumped version to $NEW_VERSION for manual release"
          
      - name: Set version for automatic triggers  
        if: github.event_name != 'workflow_dispatch'
        run: |
          # For automatic triggers, use the version from package.json
          VERSION=${{ needs.check-release.outputs.version }}
          echo "NEW_VERSION=$VERSION" >> $GITHUB_ENV
          echo "Using version $VERSION from package.json"
          
      - name: Create git tag
        run: |
          git tag "v${{ env.NEW_VERSION }}"
          git push origin "v${{ env.NEW_VERSION }}"
          
      - name: Publish to npm
        run: npm publish
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}
          
      - name: Generate release notes
        id: notes
        run: |
          # Get the previous tag
          PREV_TAG=$(git describe --tags --abbrev=0 HEAD^ 2>/dev/null || echo "")
          
          if [ -z "$PREV_TAG" ]; then
            echo "First release!"
            NOTES="Initial release of payload-plugin-newsletter"
          else
            # Generate commit list
            NOTES=$(git log ${PREV_TAG}..HEAD --pretty=format:"- %s" | grep -v "^- chore: release" || echo "- Minor updates")
          fi
          
          # Write to file to preserve newlines
          cat > release-notes.md << EOF
          ## What's Changed
          
          $NOTES
          
          ## Installation
          \`\`\`bash
          npm install payload-plugin-newsletter@${{ env.NEW_VERSION }}
          \`\`\`
          
          **Full Changelog**: ${PREV_TAG}...v${{ env.NEW_VERSION }}
          EOF
          
      - name: Create GitHub Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: v${{ env.NEW_VERSION }}
          name: v${{ env.NEW_VERSION }}
          body_path: release-notes.md
          generate_release_notes: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}